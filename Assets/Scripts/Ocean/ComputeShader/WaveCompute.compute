#pragma kernel CSMain


RWTexture2D<float4> pastWave;
RWTexture2D<float4> currentWave;
RWTexture2D<float4> nextWave;
RWTexture2D<float4> obstaclesTex;
int2 resolution;
float elasticity;
bool useReflectiveBoundaryCondition;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float nextWaveHeight;
	float v = (0.5f - 1.0f) / (0.5f + 1.0f);
	if (id.x == 0) {
		if (useReflectiveBoundaryCondition) {
			nextWaveHeight = 0;
		}
		else {
			nextWaveHeight = currentWave[int2(1,id.y)].x + v * (nextWave[int2(1,id.y)].x - currentWave[int2(0,id.y)].x);
		}
	}
	else if (id.x == resolution.x - 1) {
		if (useReflectiveBoundaryCondition) {
			nextWaveHeight = 0;
		}
		else {
			nextWaveHeight = currentWave[int2(resolution.x - 2,id.y)].x + v * (nextWave[int2(resolution.x - 2,id.y)].x - currentWave[int2(resolution.x - 1,id.y)].x);
		}
	}
	else if (id.y == 0) {
		if (useReflectiveBoundaryCondition) {
			nextWaveHeight = 0;
		}
		else {
			nextWaveHeight = currentWave[int2(id.x,1)].x + v * (nextWave[int2(id.x,1)].x - currentWave[int2(id.x,0)].x);
		}
	}
	else if (id.y == resolution.y - 1) {
		if (useReflectiveBoundaryCondition) {
			nextWaveHeight = 0;
		}
		else {
			nextWaveHeight = currentWave[int2(id.x,resolution.y - 2)].x + v * (nextWave[int2(id.x,resolution.y - 2)].x - currentWave[int2(id.x,resolution.y - 1)].x);
		}
	}
	else {
		float n00 = currentWave[id.xy].x;
		float n00Past = pastWave[id.xy].x;
		float n10 = currentWave[id.xy + uint2(1, 0)].x;
		float n01 = currentWave[id.xy + uint2(0, 1)].x;
		float nm10 = currentWave[id.xy - uint2(1, 0)].x;
		float n0m1 = currentWave[id.xy - uint2(0, 1)].x;

		nextWaveHeight = 2.0f * n00 - n00Past + 0.25 * (n0m1 + n01 + nm10 + n10 - 4.0f * n00);
		nextWaveHeight *= elasticity;
	}

	if (obstaclesTex[id.xy].x == 1) {
		nextWaveHeight = 0;
	}
	else if (obstaclesTex[id.xy].y == 1) {
		nextWaveHeight = -0.5;
	}
    else if (obstaclesTex[id.xy].z == 1)
    {
        nextWaveHeight = -0.5;
    }


	nextWave[id.xy] = float4(nextWaveHeight, nextWaveHeight, nextWaveHeight, 1);
}
